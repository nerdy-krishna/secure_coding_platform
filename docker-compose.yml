# docker-compose.yml

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: secure_coding_platform_app
    env_file:
      - .env
    # ADD THIS BLOCK to tell Python where to find the 'app' module
    environment:
      - PYTHONPATH=/app/src
    volumes:
      - ./src:/app/src
    ports:
      - "${APP_PORT:-8000}:8000" # Corrected internal port to 8000
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      vector_db:
        condition: service_started
    # UPDATE THIS COMMAND to align with the new PYTHONPATH
    command: ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  db:
    image: postgres:16
    container_name: secure_coding_platform_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT_HOST:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: secure_coding_platform_rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  vector_db: # ChromaDB
    image: chromadb/chroma:0.5.3
    container_name: secure_coding_platform_vector_db
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000 # Corrected internal port to 8000
    ports:
      - "${CHROMA_PORT_HOST:-8001}:8000"
    volumes:
      - chroma_data:/chroma

  worker:
    build:
      context: .
      dockerfile: Dockerfile # Assumes the same Dockerfile as the app
    container_name: secure_coding_platform_worker
    env_file:
      - .env
    volumes:
      - ./src:/app/src
    # CORRECT THIS to point to the 'src' directory
    environment:
        - PYTHONPATH=/app/src
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    # UPDATE THIS COMMAND to align with the new PYTHONPATH
    command: ["poetry", "run", "python", "-m", "app.workers.consumer"]


volumes:
  postgres_data:
  rabbitmq_data:
  chroma_data: